#!/usr/bin/env python
from __future__ import print_function

import argparse
import json
import sys

from gca.core import Session
from gca.auth import NetRCAuth


def write_json(json_data):
    data = json.dumps(json_data, sort_keys=True, indent=4, separators=(',', ': '), ensure_ascii=False)
    sys.stdout.write(data.encode('utf-8'))
    return data

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='GCA Client')
    parser.add_argument('url', type=str)
    parser.add_argument('-a', '--auth', dest='auth', action='store_true', default=False, help='force authentication')
    subparsers = parser.add_subparsers(help='commands')

    parser_abs = subparsers.add_parser("abstracts", help='list abstracts')
    parser_abs.add_argument('conference', type=str, help='for which conference')
    parser_abs.set_defaults(cmd='abstracts')

    parser_abs = subparsers.add_parser("image", help='get figure images')
    parser_abs.add_argument('uuid', type=str, nargs='+', help='figure uuid')
    parser_abs.set_defaults(cmd='image')

    parser_abs = subparsers.add_parser("owners", help='get owner of an object')
    parser_abs.add_argument('-t', '--type', type=str, help='type to fetch [abstract]', default='abstracts', dest='otype')
    parser_abs.add_argument('uuid', type=str, nargs='+', help='object uuid')
    parser_abs.set_defaults(cmd='owners')

    args = parser.parse_args()

    auth = NetRCAuth()
    session = Session(args.url, auth)

    if args.auth:
        session.authenticate()

    if args.cmd == 'abstracts':
        abstracts = session.get_all_abstracts(args.conference, raw=True)
        write_json(abstracts)
    elif args.cmd == 'image':
        paths = [session.get_figure_image(uuid) for uuid in args.uuid]
        for p in paths:
            print(p)
    elif args.cmd == 'owners':
        import itertools
        owners = itertools.chain.from_iterable(session.get_owners(uuid, args.otype, raw=True) for uuid in args.uuid)
        write_json(list(owners))